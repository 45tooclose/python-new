
Getting started with a very first dapp exampleI’m starting to learn how to design a dapp. I tried to reproduce exactly the example in this tutorial here (many thanks @dev_zl). I will resume in my first article some points i learned and i had to get through apart from the explanation in the original tutorial.I almost reused the original source code and changed very little. My version can be found here. Let’s begin:Solidity syntaxTheir are two new things :The constructor with the same name as the contract is deprecated:function Wrestling() public {    playerA = msg.sender;}The above code will still be deployable with warning. To eliminate the warning, i used the following syntax as replacement:constructor() public {    playerA = msg.sender;}To call an event, i added the “emit” just before calling the event:emit StartGameEvent(playerA, playerB);Remix-ide installationFor the first and simple example in the article, i preferred using VS Code and Sublime as code editor. For more complex project in the future, i should get familiar with the remix-ide from Ethereum. To prepare for that, i wanted to install it locally. As recommended from the tutorial :git clone https://github.com/ethereum/remix-ide.gitcd remix-idenpm installnpm run setupremix  # this will clone https://github.com/ethereum/remix for you and link it to remix-idenpm startIt requires nodejs and npm installed. In my case, on Ubuntu, somehow i got trouble with the compatibility of nodejs and npm. I have had both node and nodejs installed. I should keep only one. So, i had to remove nodejs:sudo apt-get remove nodejsThe version of the node left is 4.x.x, a very old one. I updated my Ubuntu repositories, installed NVM tool as nodejs version manager : an easy way to have a happy life with “bordel” world of node version. I read the “How To Install Using NVM” in this tutorial to install the version v8.11.1 (Latest LTS: Carbon). Unfortunately, it is not enough for me to get out of the trouble because of the compatibility of npm version. So, i had to update the npm version from 5.8.x to 6.0.0 by using:npm install -g npmOk, nodejs v8.11.1 + npm 6.0.0 helped me to successfully install remix-ide on my local Ubuntu.This solution also helped me get over the “permission denied” problem while installing nodejs and npm with two different accounts (root vs user), the trouble looked like :/home/user/.npm/_cacache/tmp/git-clone- .git: Permission denied EACCES: permission denied, access '/home/user/.npm-global/lib/node_modules/npm/node_modules'If someone would like to solve the problem directly instead of reinstalling node with nvm, try one of two following solutions (i did not test so i’m not sure it will work) !!!Geth + Truffle + Ganache/Mist to deploy and test my smartcontractsGeth: the core application that can create your own private blockchain on local, create contract, mine ethers. It also can connect us to the live blockchain network.Truffle: A development environment for Ethereum smart contracts.Ganache: create virtual Ethereum blockchain, and emulate an EVM.Mist: a browser for decentralized web apps.Let’s start by creating a truffle project from an empty folder with :mkdir project_name && cd project_nametruffle initsource code files of smart contracts will be stored in contracts folder.“truffle.js” and “truffle-config.js” are used to define the blockchain network configuration where i want the smart contracts of the project to be deployed, host and executed. As an example: blockchain network named : “development” at : 127.0.0.1:7545.development: { host: “127.0.0.1”, port: 7545, network_id: “*” // Match any network id }I had two options to deploy and execute the smart contracts :Using virtual blockchain created by Ganache. By this way, using canache-cli to monitoring, logging and controlling the process.cmd 1: ganache-cli -p 7545     ### to start the virtual blockchain networkcmd 2: truffle compile     ### compile solidity to bytecode       truffle migrate --network development    ### deploy to blockchain network       truffle console --network development    ### execute smartcontracts funtionalities by using JavaScript API that wraps RPC calls.Using private blockchain created by geth (or testnet/mainnet whatever you want). Using Mist as a browser to monitoring, logging and controlling the process. This is an alternative way as Ganache to do stuffs.A thing to be noticed, i somehow got “undefined” error when running the below code [1] from truffle console to create a new instance of deployed Wrestling. But after that, i still can call the functionalities of wrestling instance created. I still can not figure out why, [2] and [3] might help someone.[1]Wrestling.deployed().then(inst => { wrestling = inst })[2]Wrestling.deployed().then(wrestling=>console.log(wrestling.balance.call()))[3]Wrestling.deployed().then(function(instance{wrestling=instance})wrestling.balance.call()Geth + MistA guide to install Geth + Ethereum on Ubuntu here or here. Nothing special to be noticed. A guide to install Mist here.To be noticed that before starting geth and mist as a process, i had to be sure which network i want to connect. I might not want to connect to the live public network; instead i can choose to create my own private testnet.create an empty folder (e.g “data_local”, data_local is not mandatory locate in Mist folder) where data chain (create a subfolder named “datachain” inside “data_local” to store all data from blockchain) and privatenet configurations (genesis.json) will be located../genesis.json{“difficulty” : “0x20000”,“extraData” : “”,“gasLimit” : “0x8000000”,“alloc”: {},“config”: {         “chainId”: 15,         “homesteadBlock”: 0,         “eip155Block”: 0,         “eip158Block”: 0     }}Launch the following command to initialize a private blockchain network:geth --datadir=./data_local/chaindata/ init ./data_local/genesis.jsonLet’s start the privatenet and allow accepting rpc connections, don't close the cli:geth --datadir=./chaindata/ --rpcNow, let’s Mist browser connect to geth node in another cli :./mist --datadir "./data_local/chaindata" --rpc "./data_local/chaindata/geth.ipc"In case the geth node is running with a non default ipc endpoint or i would like to connect over the rpc interface. The attach node accepts an endpoint as following command (see here and here for more information):geth --datadir ./data_rinkeby/ --rinkebygeth --datadir ./data_ropsten/ --testnet./mist --rpc http://127.0.0.1:8545./mist --datadir "./data_rinkeby/" --rpc "./data_rinkeby/geth.ipc" --network rinkeby --node geth./mist --datadir "./data_ropsten/" --rpc "./data_ropsten/geth.ipc" --network test --node gethLet’s open the console of geth in another cli, and i can now interact with it.geth attach --datadir=./data_local/chaindata/Since i am the only member of your private network i am responsible for mining to get eths, finding all blocks, validating all transactions and executing all smart contracts by myself.mine some eths after “attach”:miner.start()miner.stop()do the last stuffs in the original tutorials.To be continue…