
The Evolution of meVuNote: This post requires basic understanding of Ethereum and meVu.It’s been a crazy year, yet amid all the hype and ICO madness different parts of the project have been constantly worked on and soon we will see a functional product and less high-valued potential. I’d like to add meVu to the growing list of cool projects nearing use-ability since we have come a long way these past 12 months and are almost ready to open up a beta version of our platform for use on a test network. While still some way from our final product, our progress has been undeniable and now seems like a good time to reflect on how far we’ve come.In less than a year we have taken meVu from a good idea in a very early draft of a whitepaper to a working beta app with the promised core functionality of peer-to-peer Ethereum bets. The front-end is more functional and better-looking every day; the smart-contract code has been rewritten several times and is constantly being tested, modified and added to, getting better with every iteration. Not all modifications are immediately committed publicly but you can see the most recently deployed code here.Early VersionsAfter reading the Ethereum whitepaper and familiarizing myself with the Solidity docs I knew that I wanted to keep my design as simple as possible and keep the barest minimum of data on-chain because writing data on the blockchain costs real money and simple code is far more likely to be secure and to run as intended.With this in mind, I thought I could fit all of the required meVu functionality into one or maybe two smart-contracts. The initial draft was about as simple as possible, however apparently it wasn’t simple enough since it was a behemoth contract requiring somewhere in the realm of 19 million gas to deploy (way over the block gas limit).The figurative size of my first smart-contract.This version also featured a design I quickly realized would never scale due to the nature of how the Ethereum blockchain works. Not only that, but having all of the data and logic for my platform in one spot would make upgrades insanely difficult if not impossible.I set out to separate everything into different smart-contracts but my first effort was not the cleanest and resulted in a lot of contracts needlessly pointing to a lot of other contracts. The contract diagram would have looked like a incomprehensible spiderweb.A decent representation of the architecture after my first effort to break the code down.Having learned valuable lessons from the first attempts I redesigned the platform to be more modular as a larger system of smart-contracts connected to a few central contracts. Almost all the logic is now separated from smart-contracts which simply hold the state of every user’s account. Every contract has the ability to be swapped with a new contract if one is in need of an upgrade. This approach also offers the ability to connect a new contract with a new feature set to the existing platform, without redeploying every contract. The drawback to this version was its dependence on the Oraclize platform to perform regular checks on events to determine winners and perform finalization logic if enough time had passed and enough Oracles had voted. This quickly proved to be incredibly costly as well as inefficient with a very definite cap on scale.The less than clean looking architecture with unfeasible Oraclize usage.Current VersionTo eliminate the over-reliance on Oraclize I altered the event creation and removal process such that the finalization logic would need to be triggered manually. It was part of my original vision to eventually have the standard sports events which were to be bet upon be created by the users, or more specifically the Oracles. Up until now this hadn’t been represented in the code since the plan also includes (and still does) the original event creation be handled by the meVu team while the platform spins up and trusted Oracles are added.Now the code allows for verified Oracles to create events that haven’t already been made. The creator of an event must also purchase a bond (of variable price) at the time of creation to discourage spam attacks and to encourage the finalization process. The event creator will have a window of time after an event has concluded and received Oracle votes with which to finalize the event. Doing so refunds the creator for the bond purchased as well as rewards them with a fraction of the earnings from bets made on that event. If the window of time for the event creator passes then any verified oracle has the ability to finalize the event and receive the rewards as well as the initial bond refund. With this mechanism users will have incentive to cover as many events as have willing bettors as well as incentive to finalize the event as quickly as possible.Removing this bottleneck presented an opportunity to implement the eventual design and make the platform better at the same time. So even though the full functionality will only be used by meVu at the beginning, the functionality is already in place to allow any trusted Oracle to create or finalize an event.The structure of the current platform. Clean and able to scale.I am really pleased with how far we have come in the past year, we have seen a lot of progress and I know the tech will only get better as we continue to work on it. The original contract I wrote wouldn’t deploy and now we are testing a contract platform that currently charges 259616 gas to make a bet and 151227 gas to take a bet. That’s $0.17 and $0.10 USD at time of writing with a 1 Gwei gasprice. The full price of betting on the platform however must include the single transaction necessary to report the winner and receive payout, which charges between 75961 ($0.05) and 237684 gas ($0.16) depending on who does which transaction first. In the optimal scenario a user will pay a minimum grand total of 227188 or $0.16 up to a maximum of 500234 or $0.34 in gas fees per bet. Even adding on the two/three percent earned by meVu and Oracles, for any bet of reasonable size that is still drastically less expensive than the exorbitant fees charged by traditional betting outlets.The original goals were to create a piece of betting technology that made users lives easier by avoiding banks and credit cards, gave them lower fees than incumbents, peace of mind with respect to their funds while betting, as well as making the online betting experience social and fun. I think we are well on our way to achieving all of this and it is exciting to see so much progress. I learn more about Ethereum and Solidity every day and I certainly can’t claim to know everything, so I’m sure there could be new issues which arise (which is why we have audits), however I am confident that the current version of the smart-contract platform does what was promised and will continue to do so at scale.Future VersionAn audit for the current version still lies ahead and it is likely the platform will improve as a result of that, however I do already have some specific plans for improvement.Specifically I’d like the platform to be as optimized as possible. I am sure there are other ways of writing what is already working and any way to make the user pay less gas, make fewer transactions or even just click fewer buttons creates a smoother UX. A natural way to accomplish this, which I’d like to implement soon, is by writing less data to the blockchain and utilizing other distributed platforms like Swarm or IPFS for storage. I’m going to begin experimenting with Infura’s TLS-enabled IPFS gateway which looks awesome.We have plans to add to the platform in various ways (detailed in the whitepaper), with new games and new forms of betting. We also will always be looking to incorporate other new technologies which will add value, whether they are improvements to Ethereum or a new distributed tech yet to be developed. If it makes sense and aligns with our goals as stated above then we will find a way to make it work.By making the platform as decentralized as possible and relying on users to perpetuate it, we believe we will get to a point where meVu can continue to operate with almost zero oversight due to well designed mechanisms and incentives.ConclusionCertainly it has been satisfying to see progress on my own project but it has also been really motivating and inspiring to see some of the other work being done in this space, especially the development on Ethereum itself. It is crazy how fast this space is moving, it seems like just yesterday State of the Dapps had less than 300 projects listed and now it is over 1400. I also remember when CryptoKitties was just a neat idea that I knew I should probably get into at the beginning but I thought ‘hey, there’s no way that will be insanely popular for some reason…’ I know better now.You can argue about whether or not they are useful but CryptoKitties was unarguably use-able, which is why it and others like it are inspiring. They are leading the way on showing what a future looks like which uses a blockchain for more than just value transfers. Hopefully with the launch of our beta, we can contribute to that vision.