
Why EXMR MONERO ℠ it is NOT a vulnerable Smart Contract ERC20 TokenIt has been an interesting week for all ERC20 tokens. Despite their popularity, a fair few tokens were vulnerable to a recently documented exploit. As such, the Binance exchange took matters into its own hands. By partnering with Quantstamp, a thorough audit of the platform’s listings was conducted. No issues were found, albeit other exchanges may not be so lucky.PeckShield Discovers ERC20 ExploitsLast week, security firm PeckShield shocked the world by discovering two exploits affecting different ERC20 tokens. These bugs would allow for malicious transactions to take place. As a result, most trading platforms suspended all of these tokens until the matter was resolved. With half a dozen currencies vulnerable, things were not looking all that great.Binance decided to take matters into its own hands. Unlike other exchanges, the firm decided to get an independent audit of its supported ERC20 tokens. None of the currencies listed on its platform are vulnerable to either exploit, which is a positive development. QuantStamp, the smart contract security audit firm, ensured everything is working as it is supposed to.The two bugs still remain present in the affected tokens. Known as batch-Overflow and proxy-Overflow, these exploits can inflate the hard-capped supply of affected tokens. It is a very worrisome development and seems to spell the end of the affected tokens. It is important to note this is not due to a flaw in the ERC20 token standard itself. Instead, the smart contracts of the affected tokens are to blame for these issues.BINANCE AND QUANTSTAMP ANNOUNCE:Binance users are the only ones who can safely trade ERC20 tokens. The investigated tokens are safe from harm. Everything else is still subject to potential issues until proven otherwise. This is another important step toward ERC20 token maturity. Issues like these are to be expected, but thankfully, the damage has remained rather limited.HERE THE PROOF OF BECAUSE EXMR MONERO IS A SAFE TOKENBINANCE announce safely trade ERC20 like: TRON; ICON ; QST and more..We present here the images of the implementations or deployments of your contracts and an audit report for each Token where you can compare with EXMR MONERO ℠.The following tokens have been audited as secure and although they present those alerts in etherscan, their internal codes do not have a critical or risk alert.TRON-TRX ERC20 SMART CONTRACTTRON-TRX ERC20 AUDITEXMR MONERO ℠ - EXMR ERC20 SMART CONTRACTEXMR MONERO ℠ -EXMR ERC20 AUDITQUANTSTAMP-QSP ERC20 CONTRACTQUANTSTAMP-QSP ERC20 AUDITVulnerability:REE: Re-Entrancy: When an alert appears here the contract has a high risk.ASF= Assertion Failure: It is not a risk alerts.BINANCE-BNB ERC20 SMART CONTRACTICON-ICX ERC20 SMART CONTRACTLIMITATIONS OF BUILDING SMART CONTRACTS WITH ERC223 AND ERC777ERC20 & ERC223: ERC223 tokens are compatible with ERC20. Everything that is designed to properly work with ERC20 (like wallets) can work with ERC223 as well. The only exception here are contracts that are relying on approve + transferFrom token deposit patterns. However, it is possible to implement approve + transferFrom functions with ERC223 tokens, even if they are not included in the standard right now. As for wallets and any third party services that are not smart-contracts, they support ERC223 automatically because the input call data of ERC20 token is valid for ERC223.ERC20 & ERC777: You can find the following statement in the ‘Backward Compatibility’ section of the ERC777 proposal: “This EIP does not introduce backward incompatibilities and is compatible with the older ERC-20 token standard.”However, Dexaran told us the exact opposite and gave us this example: “Such wallets and services as MetaMask, Mist, and MyEtherWallet are working with ERC20 tokens. The input that is designed for the ERC20 token is a contract call that contains encoded parameters and a function signature. Function calls in the Ethereum Virtual Machine are specified by the first four bytes of data sent with a transaction. These 4-byte signatures are defined as the first four bytes of the hash of the canonical representation of the function signature. This means that `transfer(address, uint256)` and `send(address, uint256)` functions will have different signatures. As a result, the input designed for the ERC20 token will not be valid for the ERC777 token.” As we use our definition of backward compatibility, ERC777 is not compatible with the ERC20 token standard.CONCLUSION:It is important that everyone can master these concepts, so that a contract may have a vulnerability, there must exist in its code, some high-risk functions, that for a developer with knowledge, it is something very easy to avoid when compiling smart contracts . This is why I claim that only a few ERC20 tokens can be victims, and those that were compiled with those risk codes known by most developers today, but it is not the entire universe of ERC20 as they have wanted to magnify the owners of the traditional coins.Resources: https://quantstamp.com/how-to-read-this-report.pdf https://peckshield.com/2018/04/25/proxyOverflow/By: CORE TEAM EXMR MONERO ℠